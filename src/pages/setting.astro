---
import Layout from "../layouts/Layout.astro";
import Dialog from "../components/Dialog.astro";
import Sidebar from "../components/Sidebar.astro";

import "@tailwindplus/elements";
import { readSettings } from "../server/settings";
import { ALLOWED_TAGS, MAX_PAGE_LIMIT } from "../../shared/default-settings.js";

const title: string = "設定画面";

const settings = await readSettings();
const tagLabels: Record<string, string> = {
    wcag2a: "WCAG 2.0 レベル A",
    wcag2aa: "WCAG 2.0 レベル AA",
    wcag2aaa: "WCAG 2.0 レベル AAA",
    wcag21a: "WCAG 2.1 レベル A",
    wcag21aa: "WCAG 2.1 レベル AA",
    wcag22aa: "WCAG 2.2 レベル AA",
    "best-practice": "ベストプラクティス",
};
const modeLabels: Record<string, string> = {
    pc: "PCモード",
    mobile: "モバイルモード",
};
const frequencyOptions = [
    { value: "daily", label: "毎日" },
    { value: "weekly", label: "毎週" },
    { value: "monthly", label: "毎月" },
];
---

<Layout title={title}>
    <Dialog />
    <Sidebar />

    <main class="py-10 lg:pl-72">
        <div class="px-4 sm:px-6 lg:px-8">
            <div class="grid max-w-7xl grid-cols-1 gap-x-8 gap-y-10 px-4 py-16 sm:px-6 md:grid-cols-3 lg:px-8">
                <hgroup>
                    <p class="text-xl/7 font-semibold text-gray-900 dark:text-white">Setting</p>
                    <h1 class="mt-2 text-base/6 text-gray-600 dark:text-gray-400">設定画面</h1>
                </hgroup>

                <form class="md:col-span-2" data-settings-form>
                    <div class="grid grid-cols-1 gap-x-6 gap-y-16">
                        <div class="col-span-full">
                            <label for="sitemap-url" class="block text-base/6 font-medium text-gray-900 dark:text-white">Sitemap.xml URL</label>
                            <div class="mt-2">
                                <input
                                    id="sitemap-url"
                                    type="url"
                                    name="sitemap-url"
                                    value={settings.sitemapUrl}
                                    placeholder="https://example.com/sitemap.xml"
                                    aria-describedby="sitemap-url-comment"
                                    class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 dark:bg-white/5 dark:text-white dark:outline-white/10 dark:placeholder:text-gray-500 dark:focus:outline-indigo-500"
                                />
                                <p id="sitemap-url-comment" class="mt-2 text-xs text-gray-600 dark:text-gray-300">sitemap.xml の URL 以外は設定できません。</p>
                            </div>
                        </div>

                        <div class="col-span-full">
                            <fieldset>
                                <legend class="block text-base/6 font-medium text-gray-900 dark:text-white">タグ</legend>
                                <p class="mt-1 text-sm text-gray-600 dark:text-gray-300">少なくとも1つは選択してください。</p>
                                <div class="mt-3 grid gap-2 sm:grid-cols-2">
                                    {
                                        ALLOWED_TAGS.map((tag) => (
                                            <label class="flex items-center gap-2 rounded-md border border-gray-200 bg-white px-3 py-2 text-sm text-gray-700 shadow-xs hover:border-indigo-600 dark:border-white/10 dark:bg-black/20 dark:text-gray-200 dark:hover:border-indigo-500">
                                                <input
                                                    type="checkbox"
                                                    name="tags"
                                                    value={tag}
                                                    checked={settings.tags.includes(tag)}
                                                    class="size-4 rounded border-gray-300 text-indigo-800 focus:ring-indigo-600 dark:border-white/20 dark:bg-black/40"
                                                />
                                                <span>{tagLabels[tag] ?? tag}</span>
                                            </label>
                                        ))
                                    }
                                </div>
                            </fieldset>
                        </div>

                        <div class="col-span-full">
                            <label for="mode" class="block text-base/6 font-medium text-gray-900 dark:text-white">モード</label>
                            <div class="mt-2 grid grid-cols-1">
                                <select
                                    id="mode"
                                    name="mode"
                                    aria-describedby="mode-comment"
                                    class="col-start-1 row-start-1 w-full appearance-none rounded-md bg-white py-1.5 pr-8 pl-3 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 dark:bg-white/5 dark:text-white dark:outline-white/10 dark:*:bg-gray-800 dark:focus:outline-indigo-500"
                                >
                                    <option value="pc" selected={settings.mode === "pc"}>{modeLabels.pc}</option>
                                    <option value="mobile" selected={settings.mode === "mobile"}>{modeLabels.mobile}</option>
                                </select>
                                <svg
                                    viewBox="0 0 16 16"
                                    fill="currentColor"
                                    data-slot="icon"
                                    aria-hidden="true"
                                    class="pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end text-gray-400 sm:size-4"
                                >
                                    <path
                                        d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z"
                                        clip-rule="evenodd"
                                        fill-rule="evenodd"></path>
                                </svg>
                            </div>
                            <p id="mode-comment" class="mt-2 text-xs text-gray-600 dark:text-gray-300">
                                PCモードは 1024px × 768px、モバイルモードは 375px × 812px サイズのブラウザウィンドウでページにアクセスします。
                            </p>
                        </div>

                        <div class="col-span-full">
                            <label for="max-pages" class="block text-sm/6 font-medium text-gray-900 dark:text-white">取得する URL の最大件数</label>
                            <div class="mt-2">
                                <input
                                    id="max-pages"
                                    name="max-pages"
                                    type="number"
                                    min={MAX_PAGE_LIMIT.min}
                                    max={MAX_PAGE_LIMIT.max}
                                    value={settings.maxPages}
                                    aria-describedby="max-pages-comment"
                                    class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 dark:bg-white/5 dark:text-white dark:outline-white/10 dark:placeholder:text-gray-500 dark:focus:outline-indigo-500"
                                />
                                <p id="max-pages-comment" class="mt-2 text-xs text-gray-600 dark:text-gray-300">指定した件数分、sitemap.xml の先頭からURLリストを取り込みます。</p>
                            </div>
                        </div>

                        <div class="col-span-full">
                            <label for="frequency" class="block text-base/6 font-medium text-gray-900 dark:text-white">テスト頻度</label>
                            <div class="mt-2 grid grid-cols-1">
                                <select
                                    id="frequency"
                                    name="frequency"
                                    aria-describedby="frequency-comment"
                                    class="col-start-1 row-start-1 w-full appearance-none rounded-md bg-white py-1.5 pr-8 pl-3 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 dark:bg-white/5 dark:text-white dark:outline-white/10 dark:*:bg-gray-800 dark:focus:outline-indigo-500"
                                >
                                    {
                                        frequencyOptions.map(({ value, label }) => (
                                            <option value={value} selected={settings.frequency === value}>
                                                {label}
                                            </option>
                                        ))
                                    }
                                </select>
                                <svg
                                    viewBox="0 0 16 16"
                                    fill="currentColor"
                                    data-slot="icon"
                                    aria-hidden="true"
                                    class="pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end text-gray-400 sm:size-4"
                                >
                                    <path
                                        d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z"
                                        clip-rule="evenodd"
                                        fill-rule="evenodd"></path>
                                </svg>
                            </div>
                            <p id="frequency-comment" class="mt-2 text-xs text-gray-600 dark:text-gray-300">
                                テストが実行される頻度を選択します。「毎日 = 1日おき」「毎週 = 7日おき」「毎月 = 30日おき」の午前3時（日本時間）にテストが実行されます。
                            </p>
                        </div>
                    </div>

                    <div class="mt-16 space-y-6">
                        <button
                            type="submit"
                            class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:cursor-pointer hover:bg-indigo-800 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 dark:bg-indigo-600 dark:shadow-none dark:hover:bg-indigo-800 dark:focus-visible:outline-indigo-500"
                        >
                            設定を保存
                        </button>
                        <div role="status" aria-live="polite" data-status>
                            <div class="hidden rounded-md bg-green-50 p-4 dark:bg-green-500/10 dark:outline dark:outline-green-500/20" id="status-message">
                                <div class="flex gap-x-3">
                                    <div class="shrink-0">
                                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 text-green-400">
                                            <path
                                                d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm3.857-9.809a.75.75 0 0 0-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 1 0-1.06 1.061l2.5 2.5a.75.75 0 0 0 1.137-.089l4-5.5Z"
                                                clip-rule="evenodd"
                                                fill-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="text-sm font-medium text-green-800 dark:text-green-300"></p>
                                    </div>
                                </div>
                            </div>
                            <div class="hidden rounded-md bg-red-50 p-4 dark:bg-red-500/15 dark:outline dark:outline-red-500/25" id="error-message">
                                <div class="flex gap-x-3">
                                    <div class="shrink-0">
                                        <svg viewBox="0 0 20 20" fill="currentColor" data-slot="icon" aria-hidden="true" class="size-5 text-red-400">
                                            <path
                                                d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z"
                                                clip-rule="evenodd"
                                                fill-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="text-sm font-medium text-red-800 dark:text-red-200"></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script is:inline>
        const form = document.querySelector("[data-settings-form]");
        const statusRegion = document.querySelector("[data-status]");
        const statusMessage = statusRegion?.querySelector("#status-message");
        const statusMessageText = statusMessage?.querySelector("p");
        const errorMessage = statusRegion?.querySelector("#error-message");
        const errorMessageText = errorMessage?.querySelector("p");

        const resetMessages = () => {
            if (statusMessage) {
                statusMessage.classList.add("hidden");
            }
            if (statusMessageText) {
                statusMessageText.textContent = "";
            }
            if (errorMessage) {
                errorMessage.classList.add("hidden");
            }
            if (errorMessageText) {
                errorMessageText.textContent = "";
            }
        };

        const setStatus = (message, tone = "info") => {
            if (!statusRegion) return;
            resetMessages();

            const isError = tone === "error";
            const target = isError ? errorMessage : statusMessage;
            const targetText = isError ? errorMessageText : statusMessageText;

            if (!target || !targetText) {
                return;
            }

            target.classList.remove("hidden");
            targetText.textContent = message;
        };

        resetMessages();

        if (form) {
            form.addEventListener("submit", async (event) => {
                event.preventDefault();
                setStatus("保存中です…", "pending");

                const formData = new FormData(form);
                const selectedTags = formData
                    .getAll("tags")
                    .map((value) => value?.toString().trim())
                    .filter((value) => value);

                if (selectedTags.length === 0) {
                    setStatus("タグを少なくとも1つ選択してください。", "error");
                    return;
                }

                const rawFrequency = formData.get("frequency")?.toString().trim().toLowerCase() ?? "daily";
                const frequency = ["daily", "weekly", "monthly"].includes(rawFrequency) ? rawFrequency : "daily";

                const payload = {
                    sitemapUrl: formData.get("sitemap-url")?.toString().trim() ?? "",
                    tags: selectedTags,
                    tag: selectedTags.join(","),
                    mode: formData.get("mode")?.toString().trim() ?? "pc",
                    maxPages: Number(formData.get("max-pages")),
                    frequency,
                };

                try {
                    const response = await fetch("/api/settings", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(payload),
                    });

                    const result = await response.json();

                    if (!response.ok || !result.ok) {
                        const details = result?.details ? " " + result.details.join(" / ") : "";
                        setStatus(`保存に失敗しました。${result?.error ?? ""}${details}`, "error");
                        return;
                    }

                    setStatus("保存しました。", "success");
                } catch (error) {
                    console.error(error);
                    setStatus("保存処理でエラーが発生しました。ネットワーク状態をご確認ください。", "error");
                }
            });
        }
    </script>
</Layout>
