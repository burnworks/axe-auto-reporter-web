---
import Layout from "../layouts/Layout.astro";
import "@tailwindplus/elements";
import { readReportsIndex, readRunSummary } from "../server/reports";

const url = new URL(Astro.request.url);
const reportsIndex = await readReportsIndex();
const runs = reportsIndex.runs ?? [];
const defaultRunId = runs[0]?.runId ?? null;
const selectedRunId = url.searchParams.get("run") ?? defaultRunId;
const selectedRun = selectedRunId ? await readRunSummary(selectedRunId) : null;
const selectedMeta = runs.find((run) => run.runId === selectedRunId) ?? null;

const toPosix = (value?: string) => (value ? value.replace(/\\/g, "/") : "");
const toRoutePath = (value?: string) => {
	if (!value) return "#";
	const normalized = toPosix(value);
	const trimmed = normalized.startsWith("src/pages/") ? normalized.slice("src/pages".length) : normalized;
	return trimmed.startsWith("/") ? trimmed : `/${trimmed}`;
};
const formatDateTime = (iso?: string | null) => {
	if (!iso) return "";
	const date = new Date(iso);
	if (Number.isNaN(date.getTime())) return iso;
	return new Intl.DateTimeFormat("ja-JP", {
		dateStyle: "medium",
		timeStyle: "short",
		timeZone: "Asia/Tokyo",
	}).format(date);
};

const formatDateOnly = (iso?: string | null) => {
	if (!iso) return "";
	const date = new Date(iso);
	if (Number.isNaN(date.getTime())) return "";
	return new Intl.DateTimeFormat("ja-JP", {
		dateStyle: "medium",
		timeZone: "Asia/Tokyo",
	}).format(date);
};

const parseRunIdToIsoString = (runId?: string | null) => {
	if (!runId) return null;
	const match = runId.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})_([0-9]{2})-([0-9]{2})-([0-9]{2})$/);
	if (!match) return null;
	const [, year, month, day, hour, minute, second] = match;
	const base = new Date(
		Date.UTC(Number.parseInt(year, 10), Number.parseInt(month, 10) - 1, Number.parseInt(day, 10), Number.parseInt(hour, 10), Number.parseInt(minute, 10), Number.parseInt(second, 10)),
	);
	if (Number.isNaN(base.getTime())) {
		return null;
	}
	const JST_OFFSET_MINUTES = 9 * 60;
	const adjusted = new Date(base.getTime() - JST_OFFSET_MINUTES * 60 * 1000);
	return adjusted.toISOString();
};

const resolveRunTimestamp = (run?: { runTimestamp?: string | null; generatedAt?: string | null; runId?: string | null } | null) =>
	run?.runTimestamp ?? run?.generatedAt ?? parseRunIdToIsoString(run?.runId ?? null);

const detailLinkFor = (baseFilename: string) => {
	if (!selectedRun?.runId) return "#";
	return `/results/${selectedRun.runId}/${baseFilename}`;
};
const stats = selectedRun?.occurrenceRates ?? {};
const totals = selectedRun?.totals ?? {};
const pages = selectedRun?.pages ?? [];
const settings = selectedRun?.settings ?? null;
const frequencyLabels: Record<string, string> = {
	daily: "毎日",
	weekly: "毎週",
	monthly: "毎月",
};
const formatFrequency = (value?: string | null) => {
	if (!value) return "未設定";
	return frequencyLabels[value] ?? value;
};
const summaryAvailable = Boolean(selectedRun && pages.length > 0);
const globalTotal = selectedRun?.globalTotal ?? 0;
const totalPages = selectedRun?.totalPages ?? 0;
const resolvedTimestamp = resolveRunTimestamp(selectedMeta ?? selectedRun) ?? parseRunIdToIsoString(selectedRunId ?? null);
const summaryDateLabel = (() => {
	const formatted = formatDateOnly(resolvedTimestamp);
	if (formatted) return formatted;
	return selectedRunId ?? "";
})();
const pageTitle = summaryAvailable && summaryDateLabel ? `アクセシビリティレポートサマリー - ${summaryDateLabel}` : undefined;

const summaryTranslations = {
	ja: {
		impactData: {
			minor: "軽度",
			moderate: "中程度",
			serious: "重大",
			critical: "緊急",
			total: "合計",
		},
		sortBy: {
			minor: "軽度の件数でソート",
			moderate: "中程度の件数でソート",
			serious: "重大の件数でソート",
			critical: "緊急の件数でソート",
			total: "合計件数でソート",
		},
		labelImpact: "影響度",
		globalTotalLabel: "検出件数",
		globalTotalUnit: "件",
		totalPagesLabel: "実行対象",
		totalPagesUnit: "ページ",
		impactDataText: "のページで検出",
		labelAnyIssue: "いずれかの影響度",
		linkToDetailReport: "「{url}」の詳細レポートを開く",
		linkToActualPage: "実際のページ（{url}）を新しいウィンドウで開く",
	},
} as const;

const summaryLocale = "ja";
const translate = <T extends keyof (typeof summaryTranslations)["ja"]>(key: T, subKey?: string) => {
	const dictionary = summaryTranslations[summaryLocale] ?? summaryTranslations.ja;
	const value = dictionary[key];
	if (typeof value === "string") {
		return value;
	}
	if (subKey && typeof value === "object" && subKey in value) {
		return (value as Record<string, string>)[subKey];
	}
	return "";
};

const formatLinkTranslation = (key: "linkToDetailReport" | "linkToActualPage", targetUrl: string) => translate(key).replace("{url}", targetUrl);
---

<Layout title={pageTitle}>
	<main class="py-10 lg:pl-72">
		<div class="px-4 sm:px-6 lg:px-8">
			<section class="flex flex-col gap-6">
				<div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
					<div>
						<h1 class="text-xl font-semibold text-gray-900 dark:text-white">アクセシビリティレポートサマリー</h1>
					</div>
					<div class="flex flex-wrap items-center gap-4">
						<label for="run-select" class="text-sm font-medium text-gray-700 dark:text-gray-200">レポート日を選択して移動</label>
						<div class="grid grid-cols-1">
							<select
								data-run-select
								id="run-select"
								name="run-select"
								class="col-start-1 row-start-1 w-full appearance-none rounded-md bg-white py-1.5 pr-8 pl-3 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 dark:bg-white/5 dark:text-white dark:outline-white/10 dark:*:bg-gray-800 dark:focus:outline-indigo-500"
							>
								{
									runs.length === 0 ? (
										<option disabled>レポートがまだありません</option>
									) : (
										runs.map((run) => (
											<option value={run.runId} selected={run.runId === selectedRunId}>
												{formatDateTime(resolveRunTimestamp(run))}（{run.totalPages}ページ）
											</option>
										))
									)
								}
							</select>
							<svg
								viewBox="0 0 16 16"
								fill="currentColor"
								data-slot="icon"
								aria-hidden="true"
								class="pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end text-gray-400 sm:size-4"
							>
								<path
									d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z"
									clip-rule="evenodd"
									fill-rule="evenodd"></path>
							</svg>
						</div>
					</div>
				</div>

				<div>
					{
						settings ? (
							<div class="rounded-md bg-gray-50 border border-gray-200 p-4 dark:border-white/10 dark:bg-white/5">
								<div class="flex items-center flex-wrap gap-x-4 gap-y-2">
									<h2 class="text-base font-semibold text-gray-900 dark:text-gray-200">テスト設定</h2>
									<p class="text-sm text-gray-700 dark:text-gray-300">このレポートは以下の設定で実行されました</p>
								</div>
								<div class="mt-4 text-sm">
									<dl class="space-y-2">
										<div class="flex gap-y-2 gap-x-4">
											<dt class="min-w-18 border-r border-gray-300 dark:text-gray-200 dark:border-white/10">タグ</dt>
											<dd>
												<ul class="flex flex-wrap gap-2">
													{settings.tags.map((tag) => (
														<li class="inline-flex items-center rounded-md bg-yellow-100 px-2 py-1 text-xs font-medium text-yellow-800 dark:bg-yellow-400/10 dark:text-yellow-500">
															{tag}
														</li>
													))}
												</ul>
											</dd>
										</div>
										<div class="flex gap-y-2 gap-x-4 dark:text-gray-200">
											<dt class="min-w-18 border-r border-gray-300 dark:border-white/10">モード</dt>
											<dd>{settings.mode}</dd>
										</div>
										<div class="flex gap-y-2 gap-x-4 dark:text-gray-200">
											<dt class="min-w-18 border-r border-gray-300 dark:border-white/10">ページ数</dt>
											<dd>{settings.maxPages}件</dd>
										</div>
									</dl>
								</div>
							</div>
						) : (
							<div class="rounded-md bg-gray-50 border border-gray-200 p-4 dark:border-white/10 dark:text-gray-200 dark:bg-white/5">設定情報が見つかりませんでした。</div>
						)
					}
				</div>
			</section>

			{
				summaryAvailable ? (
					<>
						<section class="stats-summary">
							<h2 class="stats-summary-header">
								{translate("labelImpact")}{" "}
								<span>
									（{translate("globalTotalLabel")} {globalTotal} {translate("globalTotalUnit")} / {translate("totalPagesLabel")} {totalPages} {translate("totalPagesUnit")}）
								</span>
							</h2>
							<div class="stats-cards">
								<div class="stat-card critical">
									<h3>{translate("impactData", "critical")}</h3>
									<div class="stat-number">
										{stats.critical ?? 0}
										<span>%</span>
									</div>
									<div class="stat-label">{translate("impactDataText")}</div>
								</div>
								<div class="stat-card serious">
									<h3>{translate("impactData", "serious")}</h3>
									<div class="stat-number">
										{stats.serious ?? 0}
										<span>%</span>
									</div>
									<div class="stat-label">{translate("impactDataText")}</div>
								</div>
								<div class="stat-card moderate">
									<h3>{translate("impactData", "moderate")}</h3>
									<div class="stat-number">
										{stats.moderate ?? 0}
										<span>%</span>
									</div>
									<div class="stat-label">{translate("impactDataText")}</div>
								</div>
								<div class="stat-card minor">
									<h3>{translate("impactData", "minor")}</h3>
									<div class="stat-number">
										{stats.minor ?? 0}
										<span>%</span>
									</div>
									<div class="stat-label">{translate("impactDataText")}</div>
								</div>
								<div class="stat-card any">
									<h3>{translate("labelAnyIssue")}</h3>
									<div class="stat-number">
										{stats.any ?? 0}
										<span>%</span>
									</div>
									<div class="stat-label">{translate("impactDataText")}</div>
								</div>
							</div>
						</section>

						<section class="results-section">
							<div class="summary-table">
								<h2 class="results-section-header">試験結果一覧</h2>
								<div class="overflow-x-auto" tabindex="0">
									<table id="resultsTable">
										<thead>
											<tr>
												<th scope="col">URL</th>
												<th scope="col" class="sortable" data-sort="minor">
													{translate("impactData", "minor")}
													<button class="sort-icon">
														<svg
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 24 24"
															stroke-width="1.5"
															stroke="currentColor"
															role="img"
															aria-label={translate("sortBy", "minor")}
														>
															<title>{translate("sortBy", "minor")}</title>
															<path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5 7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
														</svg>
													</button>
												</th>
												<th scope="col" class="sortable" data-sort="moderate">
													{translate("impactData", "moderate")}
													<button class="sort-icon">
														<svg
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 24 24"
															stroke-width="1.5"
															stroke="currentColor"
															role="img"
															aria-label={translate("sortBy", "moderate")}
														>
															<title>{translate("sortBy", "moderate")}</title>
															<path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5 7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
														</svg>
													</button>
												</th>
												<th scope="col" class="sortable" data-sort="serious">
													{translate("impactData", "serious")}
													<button class="sort-icon">
														<svg
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 24 24"
															stroke-width="1.5"
															stroke="currentColor"
															role="img"
															aria-label={translate("sortBy", "serious")}
														>
															<title>{translate("sortBy", "serious")}</title>
															<path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5 7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
														</svg>
													</button>
												</th>
												<th scope="col" class="sortable" data-sort="critical">
													{translate("impactData", "critical")}
													<button class="sort-icon">
														<svg
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 24 24"
															stroke-width="1.5"
															stroke="currentColor"
															role="img"
															aria-label={translate("sortBy", "critical")}
														>
															<title>{translate("sortBy", "critical")}</title>
															<path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5 7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
														</svg>
													</button>
												</th>
												<th scope="col" class="sortable" data-sort="total">
													{translate("impactData", "total")}
													<button class="sort-icon">
														<svg
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 24 24"
															stroke-width="1.5"
															stroke="currentColor"
															role="img"
															aria-label={translate("sortBy", "total")}
														>
															<title>{translate("sortBy", "total")}</title>
															<path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5 7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
														</svg>
													</button>
												</th>
											</tr>
										</thead>
										<tbody>
											{pages.map((page) => {
												const detailLink = detailLinkFor(page.baseFilename);
												const pageUrl = page.url ?? "";
												const minor = page.minor ?? 0;
												const moderate = page.moderate ?? 0;
												const serious = page.serious ?? 0;
												const critical = page.critical ?? 0;
												const total = page.total ?? 0;
												return (
													<tr data-minor={minor} data-moderate={moderate} data-serious={serious} data-critical={critical} data-total={total}>
														<th scope="row">
															<div class="report-link">
																<a
																	href={detailLink}
																	title={formatLinkTranslation("linkToDetailReport", pageUrl)}
																	aria-label={formatLinkTranslation("linkToDetailReport", pageUrl)}
																>
																	{pageUrl}
																</a>
																<a
																	class="report-link-ex"
																	href={pageUrl}
																	target="_blank"
																	rel="noreferrer"
																	title={formatLinkTranslation("linkToActualPage", pageUrl)}
																	aria-label={formatLinkTranslation("linkToActualPage", pageUrl)}
																>
																	<svg
																		xmlns="http://www.w3.org/2000/svg"
																		fill="none"
																		viewBox="0 0 24 24"
																		stroke-width="1.5"
																		stroke="currentColor"
																		class="report-link-ex-icon"
																		aria-hidden="true"
																	>
																		<path
																			stroke-linecap="round"
																			stroke-linejoin="round"
																			d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"
																		/>
																	</svg>
																</a>
															</div>
														</th>
														<td class="impact-cell minor">{minor}</td>
														<td class="impact-cell moderate">{moderate}</td>
														<td class="impact-cell serious">{serious}</td>
														<td class="impact-cell critical">{critical}</td>
														<td class="total-cell">{total}</td>
													</tr>
												);
											})}
										</tbody>
									</table>
								</div>
							</div>
						</section>
					</>
				) : (
					<section class="mt-10 rounded-xl border border-dashed border-gray-300 bg-white p-12 text-center text-gray-500 shadow-inner dark:border-white/10 dark:bg-black/20 dark:text-gray-400">
						<p class="text-lg font-medium">まだレポートがありません。</p>
						<p class="mt-2 text-sm">設定画面で sitemap を保存し、スケジューラが動作するまでお待ちください。</p>
					</section>
				)
			}
		</div>
	</main>

	<script is:inline>
		const runSelect = document.querySelector("[data-run-select]");
		if (runSelect) {
			runSelect.addEventListener("change", (event) => {
				const value = event.target.value;
				const next = new URL(window.location.href);
				if (value) {
					next.searchParams.set("run", value);
				} else {
					next.searchParams.delete("run");
				}
				window.location.href = next.toString();
			});
		}

		const openSummaryButton = document.querySelector("[data-open-summary]");
		if (openSummaryButton) {
			openSummaryButton.addEventListener("click", () => {
				const target = openSummaryButton.getAttribute("data-summary-link");
				if (target && target !== "#") {
					window.location.href = target;
				}
			});
		}

		let currentSort = { column: null, direction: "asc" };

		function sortTable(column) {
			const table = document.getElementById("resultsTable");
			if (!table) return;
			const tbody = table.querySelector("tbody");
			if (!tbody) return;
			const rows = Array.from(tbody.querySelectorAll("tr"));

			if (currentSort.column === column) {
				currentSort.direction = currentSort.direction === "asc" ? "desc" : "asc";
			} else {
				currentSort.column = column;
				currentSort.direction = "desc";
			}

			rows.sort((a, b) => {
				const aVal = parseInt(a.getAttribute("data-" + column)) || 0;
				const bVal = parseInt(b.getAttribute("data-" + column)) || 0;

				if (currentSort.direction === "asc") {
					return aVal - bVal;
				} else {
					return bVal - aVal;
				}
			});

			if (tbody.replaceChildren) {
				tbody.replaceChildren(...rows);
			} else {
				const fragment = document.createDocumentFragment();
				rows.forEach((row) => fragment.appendChild(row));
				tbody.innerHTML = "";
				tbody.appendChild(fragment);
			}

			document.querySelectorAll(".sortable").forEach((th) => {
				th.classList.remove("asc", "desc");
			});

			const activeHeader = document.querySelector('[data-sort="' + column + '"]');
			if (activeHeader) {
				activeHeader.classList.add(currentSort.direction);
			}
		}

		document.querySelectorAll(".sortable .sort-icon").forEach((button) => {
			button.addEventListener("click", () => {
				const th = button.closest(".sortable");
				const column = th?.getAttribute("data-sort");
				if (column) {
					sortTable(column);
				}
			});

			button.addEventListener("keydown", (e) => {
				if (e.key === "Enter" || e.key === " ") {
					e.preventDefault();
					const th = button.closest(".sortable");
					const column = th?.getAttribute("data-sort");
					if (column) {
						sortTable(column);
					}
				}
			});
		});
	</script>
</Layout>
